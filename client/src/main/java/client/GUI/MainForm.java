package client.GUI;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Locale;

public class MainForm {
    private JPanel mainRootPanel;
    private JPanel menuPanel;
    private JPanel dataPanel;
    private JPanel controlPanel;
    private JButton createButton;
    private JButton editButton;
    private JButton deleteButton;
    private JButton visualizeButton;
    private JButton commandsButton;
    private JPanel editPanel;
    private JPanel visualizePanel;
    private JPanel commandsPanel;
    private JTable dataTable;
    private JComboBox localeComboBox;
    private JLabel currentUserLabel;
    private JLabel numberOfWorkersLabel;
    private JScrollPane dataScrollPane;

    private final ArrayList<String> dataTableColumns = new ArrayList<>(Arrays.asList("id", "name", "x", "y", "creationDate", "salary", "startDate", "endDate", "status", "height", "eyeColor", "nationality"));

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainRootPanel = new JPanel();
        mainRootPanel.setLayout(new BorderLayout(0, 0));
        menuPanel = new JPanel();
        menuPanel.setLayout(new GridBagLayout());
        mainRootPanel.add(menuPanel, BorderLayout.NORTH);
        currentUserLabel = new JLabel();
        Font currentUserLabelFont = this.$$$getFont$$$(null, Font.PLAIN, 16, currentUserLabel.getFont());
        if (currentUserLabelFont != null) currentUserLabel.setFont(currentUserLabelFont);
        currentUserLabel.setText("Username");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(10, 0, 0, 0);
        menuPanel.add(currentUserLabel, gbc);
        numberOfWorkersLabel = new JLabel();
        Font numberOfWorkersLabelFont = this.$$$getFont$$$(null, Font.PLAIN, 16, numberOfWorkersLabel.getFont());
        if (numberOfWorkersLabelFont != null) numberOfWorkersLabel.setFont(numberOfWorkersLabelFont);
        numberOfWorkersLabel.setText("Workers: 10");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 10, 0, 0);
        menuPanel.add(numberOfWorkersLabel, gbc);
        localeComboBox = new JComboBox();
        Font localeComboBoxFont = this.$$$getFont$$$(null, Font.PLAIN, 16, localeComboBox.getFont());
        if (localeComboBoxFont != null) localeComboBox.setFont(localeComboBoxFont);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 0, 0, 10);
        menuPanel.add(localeComboBox, gbc);
        dataPanel = new JPanel();
        dataPanel.setLayout(new GridBagLayout());
        mainRootPanel.add(dataPanel, BorderLayout.CENTER);
        dataScrollPane = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 10, 0, 10);
        dataPanel.add(dataScrollPane, gbc);
        dataTable.setAutoResizeMode(4);
        dataTable.setEnabled(false);
        dataTable.setFillsViewportHeight(true);
        Font dataTableFont = this.$$$getFont$$$(null, -1, 16, dataTable.getFont());
        if (dataTableFont != null) dataTable.setFont(dataTableFont);
        dataScrollPane.setViewportView(dataTable);
        controlPanel = new JPanel();
        controlPanel.setLayout(new GridBagLayout());
        mainRootPanel.add(controlPanel, BorderLayout.SOUTH);
        editPanel = new JPanel();
        editPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.5;
        gbc.weighty = 0.5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.insets = new Insets(10, 10, 10, 0);
        controlPanel.add(editPanel, gbc);
        createButton = new JButton();
        Font createButtonFont = this.$$$getFont$$$(null, Font.PLAIN, 16, createButton.getFont());
        if (createButtonFont != null) createButton.setFont(createButtonFont);
        createButton.setText("Create");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 2, 0, 2);
        editPanel.add(createButton, gbc);
        editButton = new JButton();
        Font editButtonFont = this.$$$getFont$$$(null, Font.PLAIN, 16, editButton.getFont());
        if (editButtonFont != null) editButton.setFont(editButtonFont);
        editButton.setText("Edit");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 2, 0, 2);
        editPanel.add(editButton, gbc);
        deleteButton = new JButton();
        Font deleteButtonFont = this.$$$getFont$$$(null, Font.PLAIN, 16, deleteButton.getFont());
        if (deleteButtonFont != null) deleteButton.setFont(deleteButtonFont);
        deleteButton.setText("Delete");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 2, 0, 2);
        editPanel.add(deleteButton, gbc);
        visualizePanel = new JPanel();
        visualizePanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 0.5;
        gbc.weighty = 0.5;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 0, 10, 0);
        controlPanel.add(visualizePanel, gbc);
        visualizeButton = new JButton();
        Font visualizeButtonFont = this.$$$getFont$$$(null, Font.PLAIN, 16, visualizeButton.getFont());
        if (visualizeButtonFont != null) visualizeButton.setFont(visualizeButtonFont);
        visualizeButton.setText("Visualize");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 2, 0, 2);
        visualizePanel.add(visualizeButton, gbc);
        commandsPanel = new JPanel();
        commandsPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 0.4;
        gbc.weighty = 0.4;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.insets = new Insets(10, 0, 10, 10);
        controlPanel.add(commandsPanel, gbc);
        commandsButton = new JButton();
        Font commandsButtonFont = this.$$$getFont$$$(null, Font.PLAIN, 16, commandsButton.getFont());
        if (commandsButtonFont != null) commandsButton.setFont(commandsButtonFont);
        commandsButton.setText("Commands");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 2, 0, 2);
        commandsPanel.add(commandsButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainRootPanel;
    }

    private void createUIComponents() {
        DefaultTableModel dataTableModel = new DefaultTableModel();
        dataTableColumns.forEach(dataTableModel::addColumn);
        dataTable = new JTable(dataTableModel);
        dataTable.getTableHeader().setReorderingAllowed(false);
        dataTable.getTableHeader().setResizingAllowed(false);
    }

    public JTable getDataTable() {
        return dataTable;
    }
}
